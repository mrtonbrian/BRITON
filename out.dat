Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00 819719274     0.00     0.00  popBit(unsigned long long*)
  0.00      0.00     0.00 76933617     0.00     0.00  countBits(unsigned long long)
  0.00      0.00     0.00 25644540     0.00     0.00  GeneratePosKey(BOARD*, Globals&)
  0.00      0.00     0.00 25644539     0.00     0.00  checkBoard(BOARD*, Globals)
  0.00      0.00     0.00 15262543     0.00     0.00  fromSq(int)
  0.00      0.00     0.00 15178300     0.00     0.00  toSq(int)
  0.00      0.00     0.00 11651798     0.00     0.00  setBit(unsigned long long&, int, Globals)
  0.00      0.00     0.00 11651766     0.00     0.00  clearBit(unsigned long long&, int, Globals)
  0.00      0.00     0.00 10259417     0.00     0.00  capturePiece(int)
  0.00      0.00     0.00 10175194     0.00     0.00  promotionPiece(int)
  0.00      0.00     0.00 10175174     0.00     0.00  SideValid(int)
  0.00      0.00     0.00 10175174     0.00     0.00  MovePiece(int, int, BOARD*, Globals)
  0.00      0.00     0.00  6458095     0.00     0.00  PieceValid(int)
  0.00      0.00     0.00  5087587     0.00     0.00  squareAttacked(int, int, Globals, BOARD*)
  0.00      0.00     0.00  5087587     0.00     0.00  TakeMove(BOARD*, Globals)
  0.00      0.00     0.00  5087587     0.00     0.00  makeMove(BOARD*, int, Globals)
  0.00      0.00     0.00  5003086     0.00     0.00  addNonCapture(BOARD*, int, MOVES_LIST&)
  0.00      0.00     0.00  1248508     0.00     0.00  void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&)
  0.00      0.00     0.00   206604     0.00     0.00  generateAllMoves(BOARD*, MOVES_LIST&, Globals)
  0.00      0.00     0.00    84501     0.00     0.00  ClearPiece(int, BOARD*, Globals)
  0.00      0.00     0.00    84501     0.00     0.00  AddPiece(int, BOARD*, int, Globals)
  0.00      0.00     0.00    84243     0.00     0.00  addCaptureMove(BOARD*, int, MOVES_LIST&)
  0.00      0.00     0.00    28586     0.00     0.00  PieceValidEmpty(int)
  0.00      0.00     0.00    27882     0.00     0.00  AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals)
  0.00      0.00     0.00      704     0.00     0.00  AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals)
  0.00      0.00     0.00      258     0.00     0.00  addEnPassMove(BOARD*, int, MOVES_LIST&)
  0.00      0.00     0.00       64     0.00     0.00  rowColToSquare(int, int)
  0.00      0.00     0.00       20     0.00     0.00  isPromotion(int)
  0.00      0.00     0.00       20     0.00     0.00  Perft(int, BOARD*, Globals)
  0.00      0.00     0.00       20     0.00     0.00  printMove(int, Globals)
  0.00      0.00     0.00        2     0.00     0.00  GetTimeMs()
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_PceChar
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_PieceChar
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z11printSquarei7Globals
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z12clearPvTableP7PVTABLE
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z14GeneratePosKeyP5BOARDR7Globals
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z14rowColToSquareii
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z14searchPositionP5BOARDP10SEARCHINFO7Globals
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z6popBitPy
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z8STARTFENB5cxx11
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z8makeMoveP5BOARDi7Globals
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9GetTimeMsv
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z9SideValidi
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      0.00     0.00        1     0.00     0.00  initMvvLva()
  0.00      0.00     0.00        1     0.00     0.00  printBoard(BOARD*)
  0.00      0.00     0.00        1     0.00     0.00  resetBoard(BOARD*, Globals)
  0.00      0.00     0.00        1     0.00     0.00  initPvTable(hashTable*)
  0.00      0.00     0.00        1     0.00     0.00  InitHashKeys(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  clearPvTable(hashTable*)
  0.00      0.00     0.00        1     0.00     0.00  initEvalMasks(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  initRowColArrays(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  initSquareArrays(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  UpdateMaterialLists(BOARD*, Globals)
  0.00      0.00     0.00        1     0.00     0.00  init(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  parseFEN(char const*, BOARD*, Globals)
  0.00      0.00     0.00        1     0.00     0.00  PerftTest(int, BOARD*, Globals)
  0.00      0.00     0.00        1     0.00     0.00  initMasks(Globals&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00 819719274/819719274     checkBoard(BOARD*, Globals) [11]
[8]      0.0    0.00    0.00 819719274         popBit(unsigned long long*) [8]
-----------------------------------------------
                0.00    0.00 76933617/76933617     checkBoard(BOARD*, Globals) [11]
[9]      0.0    0.00    0.00 76933617         countBits(unsigned long long) [9]
-----------------------------------------------
                0.00    0.00       1/25644540     parseFEN(char const*, BOARD*, Globals) [63]
                0.00    0.00 25644539/25644540     checkBoard(BOARD*, Globals) [11]
[10]     0.0    0.00    0.00 25644540         GeneratePosKey(BOARD*, Globals&) [10]
-----------------------------------------------
                0.00    0.00  206604/25644539     generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
                0.00    0.00 5087587/25644539     squareAttacked(int, int, Globals, BOARD*) [21]
                0.00    0.00 10175174/25644539     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 10175174/25644539     makeMove(BOARD*, int, Globals) [23]
[11]     0.0    0.00    0.00 25644539         checkBoard(BOARD*, Globals) [11]
                0.00    0.00 819719274/819719274     popBit(unsigned long long*) [8]
                0.00    0.00 76933617/76933617     countBits(unsigned long long) [9]
                0.00    0.00 25644539/25644540     GeneratePosKey(BOARD*, Globals&) [10]
-----------------------------------------------
                0.00    0.00      40/15262543     printMove(int, Globals) [37]
                0.00    0.00   84243/15262543     addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
                0.00    0.00 5003086/15262543     addNonCapture(BOARD*, int, MOVES_LIST&) [24]
                0.00    0.00 5087587/15262543     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 5087587/15262543     makeMove(BOARD*, int, Globals) [23]
[12]     0.0    0.00    0.00 15262543         fromSq(int) [12]
-----------------------------------------------
                0.00    0.00      40/15178300     printMove(int, Globals) [37]
                0.00    0.00 5003086/15178300     addNonCapture(BOARD*, int, MOVES_LIST&) [24]
                0.00    0.00 5087587/15178300     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 5087587/15178300     makeMove(BOARD*, int, Globals) [23]
[13]     0.0    0.00    0.00 15178300         toSq(int) [13]
-----------------------------------------------
                0.00    0.00      32/11651798     UpdateMaterialLists(BOARD*, Globals) [61]
                0.00    0.00  140114/11651798     AddPiece(int, BOARD*, int, Globals) [28]
                0.00    0.00 11511652/11651798     MovePiece(int, int, BOARD*, Globals) [19]
[14]     0.0    0.00    0.00 11651798         setBit(unsigned long long&, int, Globals) [14]
-----------------------------------------------
                0.00    0.00  140114/11651766     ClearPiece(int, BOARD*, Globals) [27]
                0.00    0.00 11511652/11651766     MovePiece(int, int, BOARD*, Globals) [19]
[15]     0.0    0.00    0.00 11651766         clearBit(unsigned long long&, int, Globals) [15]
-----------------------------------------------
                0.00    0.00   84243/10259417     addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
                0.00    0.00 5087587/10259417     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 5087587/10259417     makeMove(BOARD*, int, Globals) [23]
[16]     0.0    0.00    0.00 10259417         capturePiece(int) [16]
-----------------------------------------------
                0.00    0.00      20/10175194     printMove(int, Globals) [37]
                0.00    0.00 5087587/10175194     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 5087587/10175194     makeMove(BOARD*, int, Globals) [23]
[17]     0.0    0.00    0.00 10175194         promotionPiece(int) [17]
-----------------------------------------------
                0.00    0.00 5087587/10175174     squareAttacked(int, int, Globals, BOARD*) [21]
                0.00    0.00 5087587/10175174     makeMove(BOARD*, int, Globals) [23]
[18]     0.0    0.00    0.00 10175174         SideValid(int) [18]
-----------------------------------------------
                0.00    0.00 5087587/10175174     TakeMove(BOARD*, Globals) [22]
                0.00    0.00 5087587/10175174     makeMove(BOARD*, int, Globals) [23]
[19]     0.0    0.00    0.00 10175174         MovePiece(int, int, BOARD*, Globals) [19]
                0.00    0.00 11511652/11651766     clearBit(unsigned long long&, int, Globals) [15]
                0.00    0.00 11511652/11651798     setBit(unsigned long long&, int, Globals) [14]
-----------------------------------------------
                0.00    0.00   84243/6458095     TakeMove(BOARD*, Globals) [22]
                0.00    0.00   84501/6458095     ClearPiece(int, BOARD*, Globals) [27]
                0.00    0.00   84501/6458095     AddPiece(int, BOARD*, int, Globals) [28]
                0.00    0.00 1033020/6458095     generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
                0.00    0.00 5171830/6458095     makeMove(BOARD*, int, Globals) [23]
[20]     0.0    0.00    0.00 6458095         PieceValid(int) [20]
-----------------------------------------------
                0.00    0.00 5087587/5087587     makeMove(BOARD*, int, Globals) [23]
[21]     0.0    0.00    0.00 5087587         squareAttacked(int, int, Globals, BOARD*) [21]
                0.00    0.00 5087587/10175174     SideValid(int) [18]
                0.00    0.00 5087587/25644539     checkBoard(BOARD*, Globals) [11]
-----------------------------------------------
                0.00    0.00      20/5087587     PerftTest(int, BOARD*, Globals) [64]
                0.00    0.00   15375/5087587     makeMove(BOARD*, int, Globals) [23]
                0.00    0.00 5072192/5087587     Perft(int, BOARD*, Globals) [36]
[22]     0.0    0.00    0.00 5087587         TakeMove(BOARD*, Globals) [22]
                0.00    0.00 10175174/25644539     checkBoard(BOARD*, Globals) [11]
                0.00    0.00 5087587/15178300     toSq(int) [13]
                0.00    0.00 5087587/15262543     fromSq(int) [12]
                0.00    0.00 5087587/10175174     MovePiece(int, int, BOARD*, Globals) [19]
                0.00    0.00 5087587/10259417     capturePiece(int) [16]
                0.00    0.00 5087587/10175194     promotionPiece(int) [17]
                0.00    0.00   84501/84501       AddPiece(int, BOARD*, int, Globals) [28]
                0.00    0.00   84243/6458095     PieceValid(int) [20]
-----------------------------------------------
                0.00    0.00      20/5087587     PerftTest(int, BOARD*, Globals) [64]
                0.00    0.00 5087567/5087587     Perft(int, BOARD*, Globals) [36]
[23]     0.0    0.00    0.00 5087587         makeMove(BOARD*, int, Globals) [23]
                0.00    0.00 10175174/25644539     checkBoard(BOARD*, Globals) [11]
                0.00    0.00 5171830/6458095     PieceValid(int) [20]
                0.00    0.00 5087587/15262543     fromSq(int) [12]
                0.00    0.00 5087587/15178300     toSq(int) [13]
                0.00    0.00 5087587/10175174     SideValid(int) [18]
                0.00    0.00 5087587/10259417     capturePiece(int) [16]
                0.00    0.00 5087587/10175174     MovePiece(int, int, BOARD*, Globals) [19]
                0.00    0.00 5087587/10175194     promotionPiece(int) [17]
                0.00    0.00 5087587/5087587     squareAttacked(int, int, Globals, BOARD*) [21]
                0.00    0.00   84501/84501       ClearPiece(int, BOARD*, Globals) [27]
                0.00    0.00   15375/5087587     TakeMove(BOARD*, Globals) [22]
-----------------------------------------------
                0.00    0.00 5003086/5003086     generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
[24]     0.0    0.00    0.00 5003086         addNonCapture(BOARD*, int, MOVES_LIST&) [24]
                0.00    0.00 5003086/15262543     fromSq(int) [12]
                0.00    0.00 5003086/15178300     toSq(int) [13]
                0.00    0.00 1240836/1248508     void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&) [25]
-----------------------------------------------
                0.00    0.00      62/1248508     addEnPassMove(BOARD*, int, MOVES_LIST&) [33]
                0.00    0.00    7610/1248508     addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
                0.00    0.00 1240836/1248508     addNonCapture(BOARD*, int, MOVES_LIST&) [24]
[25]     0.0    0.00    0.00 1248508         void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&) [25]
-----------------------------------------------
                0.00    0.00       1/206604      PerftTest(int, BOARD*, Globals) [64]
                0.00    0.00  206603/206604      Perft(int, BOARD*, Globals) [36]
[26]     0.0    0.00    0.00  206604         generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
                0.00    0.00 5003086/5003086     addNonCapture(BOARD*, int, MOVES_LIST&) [24]
                0.00    0.00 1033020/6458095     PieceValid(int) [20]
                0.00    0.00  206604/25644539     checkBoard(BOARD*, Globals) [11]
                0.00    0.00   55657/84243       addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
                0.00    0.00   27882/27882       AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [31]
                0.00    0.00     704/704         AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [32]
                0.00    0.00     258/258         addEnPassMove(BOARD*, int, MOVES_LIST&) [33]
-----------------------------------------------
                0.00    0.00   84501/84501       makeMove(BOARD*, int, Globals) [23]
[27]     0.0    0.00    0.00   84501         ClearPiece(int, BOARD*, Globals) [27]
                0.00    0.00  140114/11651766     clearBit(unsigned long long&, int, Globals) [15]
                0.00    0.00   84501/6458095     PieceValid(int) [20]
-----------------------------------------------
                0.00    0.00   84501/84501       TakeMove(BOARD*, Globals) [22]
[28]     0.0    0.00    0.00   84501         AddPiece(int, BOARD*, int, Globals) [28]
                0.00    0.00  140114/11651798     setBit(unsigned long long&, int, Globals) [14]
                0.00    0.00   84501/6458095     PieceValid(int) [20]
-----------------------------------------------
                0.00    0.00     704/84243       AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [32]
                0.00    0.00   27882/84243       AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [31]
                0.00    0.00   55657/84243       generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
[29]     0.0    0.00    0.00   84243         addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
                0.00    0.00   84243/15262543     fromSq(int) [12]
                0.00    0.00   84243/10259417     capturePiece(int) [16]
                0.00    0.00    7610/1248508     void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&) [25]
-----------------------------------------------
                0.00    0.00     704/28586       AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [32]
                0.00    0.00   27882/28586       AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [31]
[30]     0.0    0.00    0.00   28586         PieceValidEmpty(int) [30]
-----------------------------------------------
                0.00    0.00   27882/27882       generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
[31]     0.0    0.00    0.00   27882         AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [31]
                0.00    0.00   27882/28586       PieceValidEmpty(int) [30]
                0.00    0.00   27882/84243       addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
-----------------------------------------------
                0.00    0.00     704/704         generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
[32]     0.0    0.00    0.00     704         AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) [32]
                0.00    0.00     704/28586       PieceValidEmpty(int) [30]
                0.00    0.00     704/84243       addCaptureMove(BOARD*, int, MOVES_LIST&) [29]
-----------------------------------------------
                0.00    0.00     258/258         generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
[33]     0.0    0.00    0.00     258         addEnPassMove(BOARD*, int, MOVES_LIST&) [33]
                0.00    0.00      62/1248508     void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&) [25]
-----------------------------------------------
                0.00    0.00      64/64          printBoard(BOARD*) [53]
[34]     0.0    0.00    0.00      64         rowColToSquare(int, int) [34]
-----------------------------------------------
                0.00    0.00      20/20          printMove(int, Globals) [37]
[35]     0.0    0.00    0.00      20         isPromotion(int) [35]
-----------------------------------------------
                             5072192             Perft(int, BOARD*, Globals) [36]
                0.00    0.00      20/20          PerftTest(int, BOARD*, Globals) [64]
[36]     0.0    0.00    0.00      20+5072192 Perft(int, BOARD*, Globals) [36]
                0.00    0.00 5087567/5087587     makeMove(BOARD*, int, Globals) [23]
                0.00    0.00 5072192/5087587     TakeMove(BOARD*, Globals) [22]
                0.00    0.00  206603/206604      generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
                             5072192             Perft(int, BOARD*, Globals) [36]
-----------------------------------------------
                0.00    0.00      20/20          PerftTest(int, BOARD*, Globals) [64]
[37]     0.0    0.00    0.00      20         printMove(int, Globals) [37]
                0.00    0.00      40/15262543     fromSq(int) [12]
                0.00    0.00      40/15178300     toSq(int) [13]
                0.00    0.00      20/20          isPromotion(int) [35]
                0.00    0.00      20/10175194     promotionPiece(int) [17]
-----------------------------------------------
                0.00    0.00       2/2           PerftTest(int, BOARD*, Globals) [64]
[38]     0.0    0.00    0.00       2         GetTimeMs() [38]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[39]     0.0    0.00    0.00       1         _GLOBAL__sub_I_PceChar [39]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[40]     0.0    0.00    0.00       1         _GLOBAL__sub_I_PieceChar [40]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[41]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z11printSquarei7Globals [41]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[42]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z12clearPvTableP7PVTABLE [42]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[43]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z14GeneratePosKeyP5BOARDR7Globals [43]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[44]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z14rowColToSquareii [44]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[45]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z14searchPositionP5BOARDP10SEARCHINFO7Globals [45]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[46]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z6popBitPy [46]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[47]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z8STARTFENB5cxx11 [47]
                0.00    0.00       1/1           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [66]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[48]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z8makeMoveP5BOARDi7Globals [48]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[49]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9GetTimeMsv [49]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[50]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z9SideValidi [50]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [100]
[51]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [51]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[52]     0.0    0.00    0.00       1         initMvvLva() [52]
-----------------------------------------------
                0.00    0.00       1/1           PerftTest(int, BOARD*, Globals) [64]
[53]     0.0    0.00    0.00       1         printBoard(BOARD*) [53]
                0.00    0.00      64/64          rowColToSquare(int, int) [34]
-----------------------------------------------
                0.00    0.00       1/1           parseFEN(char const*, BOARD*, Globals) [63]
[54]     0.0    0.00    0.00       1         resetBoard(BOARD*, Globals) [54]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[55]     0.0    0.00    0.00       1         initPvTable(hashTable*) [55]
                0.00    0.00       1/1           clearPvTable(hashTable*) [57]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[56]     0.0    0.00    0.00       1         InitHashKeys(Globals&) [56]
-----------------------------------------------
                0.00    0.00       1/1           initPvTable(hashTable*) [55]
[57]     0.0    0.00    0.00       1         clearPvTable(hashTable*) [57]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[58]     0.0    0.00    0.00       1         initEvalMasks(Globals&) [58]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[59]     0.0    0.00    0.00       1         initRowColArrays(Globals&) [59]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[60]     0.0    0.00    0.00       1         initSquareArrays(Globals&) [60]
-----------------------------------------------
                0.00    0.00       1/1           parseFEN(char const*, BOARD*, Globals) [63]
[61]     0.0    0.00    0.00       1         UpdateMaterialLists(BOARD*, Globals) [61]
                0.00    0.00      32/11651798     setBit(unsigned long long&, int, Globals) [14]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[62]     0.0    0.00    0.00       1         init(Globals&) [62]
                0.00    0.00       1/1           initMasks(Globals&) [65]
                0.00    0.00       1/1           initSquareArrays(Globals&) [60]
                0.00    0.00       1/1           initRowColArrays(Globals&) [59]
                0.00    0.00       1/1           InitHashKeys(Globals&) [56]
                0.00    0.00       1/1           initMvvLva() [52]
                0.00    0.00       1/1           initEvalMasks(Globals&) [58]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[63]     0.0    0.00    0.00       1         parseFEN(char const*, BOARD*, Globals) [63]
                0.00    0.00       1/1           resetBoard(BOARD*, Globals) [54]
                0.00    0.00       1/25644540     GeneratePosKey(BOARD*, Globals&) [10]
                0.00    0.00       1/1           UpdateMaterialLists(BOARD*, Globals) [61]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[64]     0.0    0.00    0.00       1         PerftTest(int, BOARD*, Globals) [64]
                0.00    0.00      20/20          Perft(int, BOARD*, Globals) [36]
                0.00    0.00      20/5087587     TakeMove(BOARD*, Globals) [22]
                0.00    0.00      20/20          printMove(int, Globals) [37]
                0.00    0.00      20/5087587     makeMove(BOARD*, int, Globals) [23]
                0.00    0.00       2/2           GetTimeMs() [38]
                0.00    0.00       1/1           printBoard(BOARD*) [53]
                0.00    0.00       1/206604      generateAllMoves(BOARD*, MOVES_LIST&, Globals) [26]
-----------------------------------------------
                0.00    0.00       1/1           init(Globals&) [62]
[65]     0.0    0.00    0.00       1         initMasks(Globals&) [65]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__Z8STARTFENB5cxx11 [47]
[66]     0.0    0.00    0.00       1         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [66]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [39] _GLOBAL__sub_I_PceChar (board.cpp) [56] InitHashKeys(Globals&) [15] clearBit(unsigned long long&, int, Globals)
  [40] _GLOBAL__sub_I_PieceChar (movegen.cpp) [16] capturePiece(int) [23] makeMove(BOARD*, int, Globals)
  [41] _GLOBAL__sub_I__Z11printSquarei7Globals (io.cpp) [57] clearPvTable(hashTable*) [63] parseFEN(char const*, BOARD*, Globals)
  [42] _GLOBAL__sub_I__Z12clearPvTableP7PVTABLE (pvtable.cpp) [58] initEvalMasks(Globals&) [38] GetTimeMs()
  [43] _GLOBAL__sub_I__Z14GeneratePosKeyP5BOARDR7Globals (hashkey.cpp) [10] GeneratePosKey(BOARD*, Globals&) [64] PerftTest(int, BOARD*, Globals)
  [44] _GLOBAL__sub_I__Z14rowColToSquareii (init.cpp) [17] promotionPiece(int) [18] SideValid(int)
  [45] _GLOBAL__sub_I__Z14searchPositionP5BOARDP10SEARCHINFO7Globals (search.cpp) [34] rowColToSquare(int, int) [9] countBits(unsigned long long)
  [46] _GLOBAL__sub_I__Z6popBitPy (bitboards.cpp) [21] squareAttacked(int, int, Globals, BOARD*) [65] initMasks(Globals&)
  [47] _GLOBAL__sub_I__Z8STARTFENB5cxx11 (uci.cpp) [30] PieceValidEmpty(int) [37] printMove(int, Globals)
  [48] _GLOBAL__sub_I__Z8makeMoveP5BOARDi7Globals (makemove.cpp) [26] generateAllMoves(BOARD*, MOVES_LIST&, Globals) [27] ClearPiece(int, BOARD*, Globals) (makemove.cpp)
  [49] _GLOBAL__sub_I__Z9GetTimeMsv (misc.cpp) [59] initRowColArrays(Globals&) [33] addEnPassMove(BOARD*, int, MOVES_LIST&) (movegen.cpp)
  [50] _GLOBAL__sub_I__Z9SideValidi (validate.cpp) [60] initSquareArrays(Globals&) [24] addNonCapture(BOARD*, int, MOVES_LIST&) (movegen.cpp)
  [51] _GLOBAL__sub_I_main (main.cpp) [61] UpdateMaterialLists(BOARD*, Globals) [29] addCaptureMove(BOARD*, int, MOVES_LIST&) (movegen.cpp)
  [20] PieceValid(int)        [62] init(Globals&)         [32] AddBlackPawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) (movegen.cpp)
  [11] checkBoard(BOARD*, Globals) [13] toSq(int)         [31] AddWhitePawnCapMove(BOARD*, int, int, int, MOVES_LIST&, Globals) (movegen.cpp)
  [52] initMvvLva()           [36] Perft(int, BOARD*, Globals) [28] AddPiece(int, BOARD*, int, Globals) (makemove.cpp)
  [53] printBoard(BOARD*)     [12] fromSq(int)            [19] MovePiece(int, int, BOARD*, Globals) (makemove.cpp)
  [54] resetBoard(BOARD*, Globals) [8] popBit(unsigned long long*) [25] void std::vector<MOVE, std::allocator<MOVE> >::_M_realloc_insert<MOVE const&>(__gnu_cxx::__normal_iterator<MOVE*, std::vector<MOVE, std::allocator<MOVE> > >, MOVE const&)
  [55] initPvTable(hashTable*)  [14] setBit(unsigned long long&, int, Globals) [66] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
  [35] isPromotion(int)       [22] TakeMove(BOARD*, Globals)
